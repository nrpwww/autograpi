exec("""\nimport instagrapi, os, urllib, json, datetime\n\nCONTENT_JPG = 1\nCONTENT_MP4 = 2\n\nif not os.path.exists("stories"):\n	os.mkdir("stories")\n	\nif not os.path.exists("sessions"):\n	os.mkdir("sessions")\n	\n	\ntmp = open("userids.json", "r")\nuserids = json.load(tmp)\ntmp.close()\n\ntmp = open("settings.json", "r")\nsettings = json.load(tmp)\ntmp.close()\n	\ngrapi = instagrapi.Client()\n\n\ndef magic(st):\n	st_ = ""\n	for letter in st:\n		if letter in "0123456789":\n			st_ += letter\n	return st_\n	\n	\ntoday = "-" + magic(str(datetime.datetime.now(datetime.timezone.utc).date()))\n\nyesterday = "-" + magic(str(datetime.datetime.now(datetime.timezone.utc).date() - datetime.timedelta(days = 1)))\ntomorrow = "-" + magic(str(datetime.datetime.now(datetime.timezone.utc).date() + datetime.timedelta(days = 1)))\n\n\nfor story in os.listdir("stories"):\n	if not today in story and not yesterday in story and not tomorrow in story:\n		if os.path.exists("stories/" + story):\n			os.remove("stories/" + story)\n\n\nacc_username = []\nacc_password = []\n\nfor index, account in enumerate(settings):\n	acc_username.append(account["username"])\n	acc_password.append(account["password"])\n	try:\n		check = instagrapi.Client()\n		\n		check.login(acc_username[-1], acc_password[-1])\n	except:\n		acc_username.pop(-1)\n		acc_password.pop(-1)\n		\n\nfor ids in [userids[i:i + 10] for i in range(0, len(userids), 10)]:\n	try:\n		grapi = instagrapi.Client()\n\n		if not acc_username:\n			break\n			\n		if not acc_password:\n			break\n		\n		if os.path.exists("sessions/" + acc_username[0] + ".json"):\n			grapi.load_settings("sessions/" + acc_username[0] + ".json")\n		\n		grapi.login(acc_username[0], acc_password[0])\n	except:\n		pass\n		\n	try:\n		grapi.get_timeline_feed()\n	except:	\n		try:\n			grapi = instagrapi.Client()\n\n			if not acc_username:\n				break\n				\n			if not acc_password:\n				break\n			\n			username = input("Username: ") \n			password = input("Passwd: ")\n						\n			acc_username[0] = acc_username[0] if username != "" else acc_username[0]\n			acc_password[0] = acc_password[0] if password != "" else acc_password[0]\n			\n			grapi.login(acc_username[0], acc_password[0])\n		except:\n			grapi = instagrapi.Client()\n\n			if not acc_username:\n				break\n				\n			if not acc_password:\n				break\n\n			acc_username.pop(0)\n			acc_password.pop(0)\n			\n			if not acc_username:\n				break\n				\n			if not acc_password:\n				break\n			\n			grapi.login(acc_username[0], acc_password[0])\n\n	grapi.inject_sessionid_to_public()\n\n	for userid in ids:\n		try:\n			for story in grapi.user_stories(str(userid)):\n				if story.media_type == CONTENT_JPG:\n					if not os.path.exists("stories/" + story.user.username + "-" + magic(str(story.taken_at)) + ".jpg"):\n						urllib.request.urlretrieve("https://" + story.thumbnail_url.host + story.thumbnail_url.path + "?" + story.thumbnail_url.query, "stories/" + story.user.username + "-" + magic(str(story.taken_at)) + ".jpg")\n					print(acc_username[0], story.user.username + "-" + magic(str(story.taken_at)) + ".jpg")\n				if story.media_type == CONTENT_MP4:\n					if not os.path.exists("stories/" + story.user.username + "-" + magic(str(story.taken_at)) + ".mp4"):\n						urllib.request.urlretrieve("https://" + story.video_url.host + story.video_url.path + "?" + story.video_url.query, "stories/" + story.user.username + "-" + magic(str(story.taken_at)) + ".mp4")\n					print(acc_username[0], story.user.username + "-" + magic(str(story.taken_at)) + ".mp4")\n		except:\n			pass\n		\n	grapi.dump_settings("sessions/" + acc_username[0] + ".json")\n""")